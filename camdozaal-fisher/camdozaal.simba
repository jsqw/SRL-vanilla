program camdozaalfisher;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I WaspLib/osr.simba}
{$DEFINE FORMS_V2}

begin
  Login.PlayerIndex := 0;
end;

type
  EState = (
    ANIMATING, BANK_HANDLES, PREP_FISH,
    START_FISH, DROP_JUNK, OFFER_FISH
  );

var
  BankHandle: Boolean := True;
  CookingLvl, StartXP, CurrentXP, GainedXP: Int32;
  RSW: TRSWalker;
  State: EState;
  Timer: TStopwatch;
  JunkFish: TRSItemArray := [
    'Ruined guppy', 'Ruined cavefish',
    'Ruined tetra', 'Ruined catfish'
  ];
  RawFish: TRSItemArray := [
    'Raw guppy', 'Raw cavefish',
    'Raw tetra', 'Raw catfish'
  ];
  CookedFish: TRSItemArray := [
    'Guppy', 'Cavefish',
    'Tetra', 'Catfish'
  ];

procedure PauseTimer(Task: PBreakTask);
var T: PBreakTask;
begin
  Timer.Pause;
  T := Task;
end;

procedure ResumeTimer(Task: PBreakTask);
var T: PBreakTask;
begin
  Timer.Resume;
  T := Task;
end;

procedure UpdateCooking();
begin
  CookingLvl := Stats.GetLevel(ERSSKILL.COOKING, False);
end;

procedure KeyboardRotate();
var
  Arrow: Integer;
  Duration: Int64;
begin
  if SRL.Dice(50) then
    Arrow := $25
  else
    Arrow := $27;
  Duration := SRL.NormalRange(325, 1850);
  Keyboard.KeyDown(Arrow);
  Sleep(Duration);
  Keyboard.KeyUp(Arrow);
end;

procedure CalculateXP();
var t: Int32;
begin
  if (StartXP = -1) then
    Exit();
  CurrentXP := XPBar.Read();
  t         := GainedXP;
  GainedXP  := CurrentXP - StartXP;
  if (GainedXP > t) then
    Timer.Reset();
  if (Timer.ElapsedTime > 300000) then
    TerminateScript('No Gained XP in 5 minutes!');
end;

procedure PrintProgress();
begin
  ClearDebug();
  CalculateXP();
  WriteLn('|------------------------------|');
  WriteLn('| Time running   : ', SRL.MsToTime(GetTimeRunning, Time_Short));
  WriteLn('| Gained XP      : ', GainedXP);
  WriteLn('| XP/Hour        : ', Round((GainedXP/((GetTimeRunning()/3600))), 2), ' K');
  WriteLn('| State          : ', ToStr(State));
  WriteLn('| Failsafe timer : ', SRL.MsToTime((300000-Timer.ElapsedTime), Time_Short));
  WriteLn('|------------------------------|');
end;

procedure SetupAntiBan();
begin
  Antiban.Skills := [ERSSKILL.PRAYER, ERSSKILL.TOTAL];
  Antiban.AddTask(ONE_MINUTE  * 4,   @Antiban.RandomRightClick);
  Antiban.AddTask(ONE_SECOND  * 45,  @Mouse.RandomMovement);
  Antiban.AddTask(ONE_MINUTE  * 5,   @KeyboardRotate);
  Antiban.AddTask(ONE_MINUTE  * 5,   @Antiban.RandomRotate);
  Antiban.AddTask(ONE_MINUTE  * 15,  @Antiban.HoverSkills);
  Antiban.AddTask(ONE_MINUTE  * 5,   @UpdateCooking);
  Antiban.AddTask(ONE_MINUTE  * 4,   @Antiban.LoseFocus);
  Antiban.AddBreak(40 * ONE_MINUTE, 8 * ONE_MINUTE, 0.9, 1);
  Antiban.AddBreak(12 * ONE_HOUR, 4 * ONE_HOUR, 0.7, 1);
  Antiban.OnStartBreak := @PauseTimer;
  Antiban.OnFinishBreak := @ResumeTimer;
end;

function IsAnimating(): Boolean;
var
  T: TCountdown;
begin
  T.Init(SRL.NormalRange(1850, 2550));
  while not T.IsFinished() do
  begin
    if SRL.PercentShift(MainScreen.GetPlayerBox(), 325) > 14 then
      Exit(True);
  end;
  Exit(False);
end;

procedure InitiateScript();
begin
  Mouse.Speed := SRL.NormalRange(12, 20);
  RSW.Setup('world');
  SetupAntiBan();
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();
  WaitUntil(RSClient.IsLoggedIn(), 100, 10000);
  StartXP := XPBar.Read();
  Timer.Start();
  UpdateCooking();
  if not BankHandle then
    JunkFish += 'Barronite handle';
end;

procedure DropUnpreparableFish();
begin
  if CookingLvl > 46 then
    Exit();

  if CookingLvl < 46 then
    if Inventory.ContainsItem('Raw catfish') then
      Inventory.ShiftDrop(['Raw catfish'], DROP_PATTERN_REGULAR);

  if CookingLvl < 33 then
    if Inventory.ContainsItem('Raw tetra') then
      Inventory.ShiftDrop(['Raw tetra'], DROP_PATTERN_REGULAR);

  if CookingLvl < 20 then
    if Inventory.ContainsItem('Raw cavefish') then
      Inventory.ShiftDrop(['Raw cavefish'], DROP_PATTERN_REGULAR);
end;

function GetState(): EState;
begin
  if IsAnimating() then
    Exit(ANIMATING)
  else if Inventory.CountItem('Barronite handle') > 10 then
    Exit(BANK_HANDLES)
  else if Inventory.ContainsAny(RawFish) and Inventory.ContainsAny(CookedFish) then
    Exit(PREP_FISH)
  else if Inventory.ContainsAny(JunkFish) then
    Exit(DROP_JUNK)
  else if Inventory.IsFull() and Inventory.ContainsAny(RawFish) then
    Exit(PREP_FISH)
  else if Inventory.ContainsAny(CookedFish) and not Inventory.ContainsAny(RawFish) then
    Exit(OFFER_FISH)
  else if not Inventory.IsFull() then
    Exit(START_FISH);
end;

function GetTypeCount(Items: TRSItemArray): Int32;
var
  i: Int32;
begin
  for i := 0 to High(Items) do
    if Inventory.ContainsItem(Items[i]) then
    Result := Result+1;
end;

procedure OfferFish();
var
  AltarLocation: TPoint := [1114, 3980];
  AltarColor: TCTS2Color := CTS2(9270402, 1, 0.01, 0.01);
  Count: Int32;
  Rect: TRectangle;
  Bds: TBox;
  TPA: TPointArray;
begin
  Rect := RSW.GetTileMS(AltarLocation).Expand(8);
  Bds := Rect.Bounds();

  if Mainscreen.Bounds.Contains(Bds) then
  begin
    SRL.FindColors(TPA, AltarColor, Bds);
    if TPA.Len > 1 then
    begin
      Mouse.HumanMove(TPA.Mean());
      WaitEx(55, 50);
      if Mainscreen.IsUpText('Offer') then
      begin
        Mouse.Click(MOUSE_LEFT);
        Count := GetTypeCount(CookedFish);
        WaitUntil(Make.IsOpen, 500, 10000);
        Make.Select(0, Make.QUANTITY_ALL, True);
        WaitUntil(Count > GetTypeCount(CookedFish), 1000, 40000);
        Exit();
      end;
    end;
  end;

  RSW.WalkBlind([1098, 3978]);
end;

procedure PrepareFish();
var
  TableLocation: TPoint := [1108, 3970];
  TableColor: TCTS2Color := CTS2(6309204, 1, 0.01, 0.01);
  Rect: TRectangle;
  Bds: TBox;
  TPA: TPointArray;
  Count: Int32;
begin
  DropUnpreparableFish();
  Rect := RSW.GetTileMS(TableLocation).Expand(8);
  Bds := Rect.Bounds();

  if Mainscreen.Bounds().Contains(Bds) then
  begin
    SRL.FindColors(TPA, TableColor, Bds);
    if TPA.Len > 1 then
    begin
      Mouse.HumanMove(TPA.Mean());
      WaitEx(55, 50);
      if Mainscreen.IsUpText('Prep') then
      begin
        Mouse.Click(MOUSE_LEFT);
        Count := GetTypeCount(RawFish);
        WaitUntil(Make.IsOpen, 500, 10000);
        Make.Select(0, Make.QUANTITY_ALL, True);
        WaitUntil(Count > GetTypeCount(RawFish), 1000, 40000);
        Exit();
      end;
    end;
  end;
  RSW.WalkBlind([1098, 3978]);
end;

procedure StartFishing();
var
  CTPA, STPA, TPA: TPointArray;
  ATPA: T2DPointArray;
  SpotColor: TCTS2Color := CTS2(11511677, 2, 0.14, 2.14);
  Ms, Bds: TBox;
  Finder: TRSObjectFinder;
begin
  STPA := RSW.GetMSPolyGon([[1075, 3940], [1081, 3941],
  [1085, 3946], [1081, 3973], [1071, 3980]]);
  Bds := STPA.Bounds();
  Ms := Mainscreen.Bounds();
  Bds.LimitTo(Ms);

  Finder.Colors += SpotColor;
  Finder.Grow := 3;
  Finder.ClusterDistance := 3;

  ATPA := Mainscreen.FindObject(Finder, Bds);

  if (ATPA.Len < 1) then
  begin
    RSW.WalkBlind([1086, 3970]);
    Exit();
  end;

  RSClient.Image.DrawATPA(ATPA);

  for TPA in ATPA do
    CTPA += TPA.Mean();

  CTPA.Sort([Mainscreen.GetPlayerBox.Middle.X, Mainscreen.GetPlayerBox.Y2]);
  Mouse.HumanMove(CTPA[0]);
  if Mainscreen.IsUpText('Fish') then
    Mouse.Click(MOUSE_LEFT);
  WaitEx(1275, 575);
  RSClient.Image.Clear();
end;

procedure BankHandles();
var
  Path: TPointArray := [[1090, 3938], [1086, 3902],
                        [1118, 3886], [1166, 3886],
                        [1226, 3878], [1262, 3878]];
  BankTile: TPoint := [1282, 3874];
  ReversePath: TPointArray;
  Rect: TRectangle;
  Handle: TRSBankItem := ['Barronite handle', Bank.QUANTITY_ALL, False];
begin
  if RSW.GetMyPos.DistanceTo(BankTile) > 36 then
    RSW.WalkPath(Path);

  Rect := RSW.GetTileMs(BankTile);
  Mouse.HumanMove(Rect.Bounds.Center());

  if Mainscreen.IsUpText('Bank') then
  begin
    Mouse.Click(MOUSE_LEFT);
    WaitUntil(Bank.IsOpen, 500, 10000);
    Bank.DepositItem(Handle, False);
    WaitEx(1575, 1125);
    Bank.Close();
    ReversePath := Path.Reversed();
    RSW.WalkPath(ReversePath);
  end
  else
    Antiban.RandomRotate();
end;

procedure FisherLoop();
begin
  Antiban.DoAntiban();
  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();
  State := GetState();
  PrintProgress();
  case State of
    ANIMATING    : Wait(1575);
    DROP_JUNK    : Inventory.ShiftDrop(JunkFish, DROP_PATTERN_REGULAR);
    START_FISH   : StartFishing();
    PREP_FISH    : PrepareFish();
    OFFER_FISH   : OfferFish();
    BANK_HANDLES : BankHandles();
  end;
end;

begin
  InitiateScript();
  repeat
    begin
      FisherLoop();
      WaitEx(250, 200);
    end;
  until false;
end.
